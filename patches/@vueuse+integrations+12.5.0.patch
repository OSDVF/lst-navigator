diff --git a/node_modules/@vueuse/integrations/index.cjs b/node_modules/@vueuse/integrations/index.cjs
index 52f5c0b..68545e5 100644
--- a/node_modules/@vueuse/integrations/index.cjs
+++ b/node_modules/@vueuse/integrations/index.cjs
@@ -534,7 +534,7 @@ function useIDBKeyval(key, initialValue, options = {}) {
     }
     isFinished.value = true;
   }
-  read();
+  const isRead = read();
   async function write() {
     try {
       if (data.value == null) {
@@ -558,6 +558,7 @@ function useIDBKeyval(key, initialValue, options = {}) {
   }
   return {
     set: setData,
+    isRead,
     isFinished,
     data
   };
diff --git a/node_modules/@vueuse/integrations/index.d.cts b/node_modules/@vueuse/integrations/index.d.cts
index ee0887d..d39d049 100644
--- a/node_modules/@vueuse/integrations/index.d.cts
+++ b/node_modules/@vueuse/integrations/index.d.cts
@@ -31,6 +31,7 @@ interface UseAsyncValidatorExecuteReturn {
 interface UseAsyncValidatorReturn {
     pass: Ref<boolean>;
     isFinished: Ref<boolean>;
+    isRead: Promise<void>;
     errors: Ref<AsyncValidatorError['errors'] | undefined>;
     errorInfo: Ref<AsyncValidatorError | null>;
     errorFields: Ref<AsyncValidatorError['fields'] | undefined>;
@@ -74,6 +75,7 @@ interface UseAxiosReturn<T, R = AxiosResponse<T>, _D = any, O extends UseAxiosOp
      * Indicates if the request has finished
      */
     isFinished: Ref<boolean>;
+    isRead: Promise<void>;
     /**
      * Indicates if the request is currently loading
      */
@@ -352,6 +354,7 @@ interface UseIDBOptions extends ConfigurableFlush {
 interface UseIDBKeyvalReturn<T> {
     data: RemovableRef<T>;
     isFinished: Ref<boolean>;
+    isRead: Promise<void>;
     set: (value: T) => Promise<void>;
 }
 /**
diff --git a/node_modules/@vueuse/integrations/index.d.mts b/node_modules/@vueuse/integrations/index.d.mts
index ee0887d..d39d049 100644
--- a/node_modules/@vueuse/integrations/index.d.mts
+++ b/node_modules/@vueuse/integrations/index.d.mts
@@ -31,6 +31,7 @@ interface UseAsyncValidatorExecuteReturn {
 interface UseAsyncValidatorReturn {
     pass: Ref<boolean>;
     isFinished: Ref<boolean>;
+    isRead: Promise<void>;
     errors: Ref<AsyncValidatorError['errors'] | undefined>;
     errorInfo: Ref<AsyncValidatorError | null>;
     errorFields: Ref<AsyncValidatorError['fields'] | undefined>;
@@ -74,6 +75,7 @@ interface UseAxiosReturn<T, R = AxiosResponse<T>, _D = any, O extends UseAxiosOp
      * Indicates if the request has finished
      */
     isFinished: Ref<boolean>;
+    isRead: Promise<void>;
     /**
      * Indicates if the request is currently loading
      */
@@ -352,6 +354,7 @@ interface UseIDBOptions extends ConfigurableFlush {
 interface UseIDBKeyvalReturn<T> {
     data: RemovableRef<T>;
     isFinished: Ref<boolean>;
+    isRead: Promise<void>;
     set: (value: T) => Promise<void>;
 }
 /**
diff --git a/node_modules/@vueuse/integrations/index.d.ts b/node_modules/@vueuse/integrations/index.d.ts
index ee0887d..d39d049 100644
--- a/node_modules/@vueuse/integrations/index.d.ts
+++ b/node_modules/@vueuse/integrations/index.d.ts
@@ -31,6 +31,7 @@ interface UseAsyncValidatorExecuteReturn {
 interface UseAsyncValidatorReturn {
     pass: Ref<boolean>;
     isFinished: Ref<boolean>;
+    isRead: Promise<void>;
     errors: Ref<AsyncValidatorError['errors'] | undefined>;
     errorInfo: Ref<AsyncValidatorError | null>;
     errorFields: Ref<AsyncValidatorError['fields'] | undefined>;
@@ -74,6 +75,7 @@ interface UseAxiosReturn<T, R = AxiosResponse<T>, _D = any, O extends UseAxiosOp
      * Indicates if the request has finished
      */
     isFinished: Ref<boolean>;
+    isRead: Promise<void>;
     /**
      * Indicates if the request is currently loading
      */
@@ -352,6 +354,7 @@ interface UseIDBOptions extends ConfigurableFlush {
 interface UseIDBKeyvalReturn<T> {
     data: RemovableRef<T>;
     isFinished: Ref<boolean>;
+    isRead: Promise<void>;
     set: (value: T) => Promise<void>;
 }
 /**
diff --git a/node_modules/@vueuse/integrations/index.iife.js b/node_modules/@vueuse/integrations/index.iife.js
index 234a41c..bb72018 100644
--- a/node_modules/@vueuse/integrations/index.iife.js
+++ b/node_modules/@vueuse/integrations/index.iife.js
@@ -519,7 +519,7 @@
       }
       isFinished.value = true;
     }
-    read();
+    const isRead = read();
     async function write() {
       try {
         if (data.value == null) {
@@ -543,6 +543,7 @@
     }
     return {
       set: setData,
+      isRead,
       isFinished,
       data
     };
diff --git a/node_modules/@vueuse/integrations/index.mjs b/node_modules/@vueuse/integrations/index.mjs
index af11f6f..1c5a424 100644
--- a/node_modules/@vueuse/integrations/index.mjs
+++ b/node_modules/@vueuse/integrations/index.mjs
@@ -513,7 +513,7 @@ function useIDBKeyval(key, initialValue, options = {}) {
     }
     isFinished.value = true;
   }
-  read();
+  const isRead = read();
   async function write() {
     try {
       if (data.value == null) {
@@ -537,6 +537,7 @@ function useIDBKeyval(key, initialValue, options = {}) {
   }
   return {
     set: setData,
+    isRead,
     isFinished,
     data
   };
diff --git a/node_modules/@vueuse/integrations/useIDBKeyval.cjs b/node_modules/@vueuse/integrations/useIDBKeyval.cjs
index b2c304f..ff891a7 100644
--- a/node_modules/@vueuse/integrations/useIDBKeyval.cjs
+++ b/node_modules/@vueuse/integrations/useIDBKeyval.cjs
@@ -31,7 +31,7 @@ function useIDBKeyval(key, initialValue, options = {}) {
     }
     isFinished.value = true;
   }
-  read();
+  const isRead = read();
   async function write() {
     try {
       if (data.value == null) {
@@ -55,6 +55,7 @@ function useIDBKeyval(key, initialValue, options = {}) {
   }
   return {
     set: setData,
+    isRead,
     isFinished,
     data
   };
diff --git a/node_modules/@vueuse/integrations/useIDBKeyval.d.cts b/node_modules/@vueuse/integrations/useIDBKeyval.d.cts
index 2105003..b55b73c 100644
--- a/node_modules/@vueuse/integrations/useIDBKeyval.d.cts
+++ b/node_modules/@vueuse/integrations/useIDBKeyval.d.cts
@@ -30,6 +30,7 @@ interface UseIDBOptions extends ConfigurableFlush {
 interface UseIDBKeyvalReturn<T> {
     data: RemovableRef<T>;
     isFinished: Ref<boolean>;
+    isRead: Ref<boolean>;
     set: (value: T) => Promise<void>;
 }
 /**
diff --git a/node_modules/@vueuse/integrations/useIDBKeyval.d.mts b/node_modules/@vueuse/integrations/useIDBKeyval.d.mts
index 2105003..b55b73c 100644
--- a/node_modules/@vueuse/integrations/useIDBKeyval.d.mts
+++ b/node_modules/@vueuse/integrations/useIDBKeyval.d.mts
@@ -30,6 +30,7 @@ interface UseIDBOptions extends ConfigurableFlush {
 interface UseIDBKeyvalReturn<T> {
     data: RemovableRef<T>;
     isFinished: Ref<boolean>;
+    isRead: Ref<boolean>;
     set: (value: T) => Promise<void>;
 }
 /**
diff --git a/node_modules/@vueuse/integrations/useIDBKeyval.d.ts b/node_modules/@vueuse/integrations/useIDBKeyval.d.ts
index 2105003..b55b73c 100644
--- a/node_modules/@vueuse/integrations/useIDBKeyval.d.ts
+++ b/node_modules/@vueuse/integrations/useIDBKeyval.d.ts
@@ -30,6 +30,7 @@ interface UseIDBOptions extends ConfigurableFlush {
 interface UseIDBKeyvalReturn<T> {
     data: RemovableRef<T>;
     isFinished: Ref<boolean>;
+    isRead: Ref<boolean>;
     set: (value: T) => Promise<void>;
 }
 /**
diff --git a/node_modules/@vueuse/integrations/useIDBKeyval.iife.js b/node_modules/@vueuse/integrations/useIDBKeyval.iife.js
index c749884..8e484b7 100644
--- a/node_modules/@vueuse/integrations/useIDBKeyval.iife.js
+++ b/node_modules/@vueuse/integrations/useIDBKeyval.iife.js
@@ -28,7 +28,7 @@
       }
       isFinished.value = true;
     }
-    read();
+    const isRead = read();
     async function write() {
       try {
         if (data.value == null) {
@@ -52,6 +52,7 @@
     }
     return {
       set: setData,
+      isRead,
       isFinished,
       data
     };
diff --git a/node_modules/@vueuse/integrations/useIDBKeyval.mjs b/node_modules/@vueuse/integrations/useIDBKeyval.mjs
index 3a1cd0d..c6d846c 100644
--- a/node_modules/@vueuse/integrations/useIDBKeyval.mjs
+++ b/node_modules/@vueuse/integrations/useIDBKeyval.mjs
@@ -29,7 +29,7 @@ function useIDBKeyval(key, initialValue, options = {}) {
     }
     isFinished.value = true;
   }
-  read();
+  const isRead = read();
   async function write() {
     try {
       if (data.value == null) {
@@ -53,6 +53,7 @@ function useIDBKeyval(key, initialValue, options = {}) {
   }
   return {
     set: setData,
+    isRead,
     isFinished,
     data
   };
